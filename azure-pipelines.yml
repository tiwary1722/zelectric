trigger:
  branches:
    include:
      - main
      - dev

variables:
  backend_rg: dontestingrg
  backend_storage: dontestingstorageacct
  container_name: tfstate
  tf_version: '1.5.7' # This variable is now unused, but kept for context

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Terraform_Dev_Plan
  displayName: "Terraform Plan - Dev"
  jobs:
  - job: plan
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.5.7' # HARDCODED HERE
      displayName: 'Install Terraform CLI for Plan'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure subscription 1'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/ZELECTRIC/environments/dev'
        inlineScript: |
          echo "Cleaning local Terraform cache..."
          # Remove existing .terraform directory and lock file to ensure a clean slate
          rm -rf .terraform
          rm -f .terraform.lock.hcl # Use -f for files in bash

          echo "Initializing Terraform backend with upgrade and reconfigure..."
          # Use -upgrade to force re-download and update lock file if needed
          # Use -reconfigure to discard any existing configuration and re-initialize
          terraform init -backend-config="resource_group_name=$(backend_rg)" \
                         -backend-config="storage_account_name=$(backend_storage)" \
                         -backend-config="container_name=$(container_name)" \
                         -backend-config="key=dev.terraform.tfstate" \
                         -upgrade -reconfigure # ADDED FLAGS HERE

          echo "Generating Terraform plan..."
          terraform plan -out=tfplan -var-file="terraform.tfvars"
      displayName: 'Terraform Init and Plan'

    - publish: '$(System.DefaultWorkingDirectory)/ZELECTRIC/environments/dev/tfplan'
      artifact: 'TerraformPlan'
      displayName: 'Publish Terraform Plan Artifact'

- stage: Terraform_Dev_Apply
  displayName: "Terraform Apply - Dev"
  dependsOn: Terraform_Dev_Plan
  condition: succeeded()

  jobs:
  - job: apply
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.5.7' # HARDCODED HERE
      displayName: 'Install Terraform CLI for Apply'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'TerraformPlan'
        targetPath: '$(System.DefaultWorkingDirectory)/ZELECTRIC/environments/dev'
      displayName: 'Download Terraform Plan Artifact'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure subscription 1'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/ZELECTRIC/environments/dev'
        inlineScript: |
          echo "Cleaning local Terraform cache for apply..."
          # Remove existing .terraform directory and lock file to ensure a clean slate
          rm -rf .terraform
          rm -f .terraform.lock.hcl # Use -f for files in bash

          echo "Initializing Terraform backend for apply with upgrade and reconfigure..."
          # Use -upgrade to force re-download and update lock file if needed
          # Use -reconfigure to discard any existing configuration and re-initialize
          terraform init -backend-config="resource_group_name=$(backend_rg)" \
                         -backend-config="storage_account_name=$(backend_storage)" \
                         -backend-config="container_name=$(container_name)" \
                         -backend-config="key=dev.terraform.tfstate" \
                         -upgrade -reconfigure # ADDED FLAGS HERE

          echo "Applying Terraform plan..."
          terraform apply -auto-approve tfplan
      displayName: 'Terraform Apply'